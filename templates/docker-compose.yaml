volumes:
  db-data:
services:
  db:
    image: postgres:17
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.${PROJECT_REFERENCE}.rule=HostSNI(`${PROJECT_REFERENCE}.${BAAS_HOST}`)"
      - "traefik.tcp.routers.${PROJECT_REFERENCE}.tls=true"
      - "traefik.tcp.routers.${PROJECT_REFERENCE}.entrypoints=postgres"
      - "traefik.tcp.routers.${PROJECT_REFERENCE}.tls.certresolver=local"
      - "traefik.tcp.services.${PROJECT_REFERENCE}.loadbalancer.server.port=5432"
    networks:
      - traefik
  # hasura:
  #   image: hasura/graphql-engine:v2.35.1
  #   depends_on:
  #     - db
  #   restart: always
  #   expose:
  #     - 8080
  #   environment:
  #     HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@db:5432/postgres
  #     HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
  #     HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
  #     HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
  #     HASURA_GRAPHQL_LOG_LEVEL: debug
  #     HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
  #     HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS: "false"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.hasura.rule=Host(`${PROXY_HOST}`, `localhost`) && PathPrefix(`/`)"
  #     - "traefik.http.routers.hasura.entrypoints=web"
  # postgrest:
  #   image: postgrest/postgrest:v12.2.8
  #   depends_on:
  #     - db
  #   restart: always
  #   expose:
  #     - 3000
  #   environment:
  #     PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@db:5432/postgres
  #     PGRST_OPENAPI_SERVER_PROXY_URI: http://127.0.0.1:3000
  #     PGRST_DB_SCHEMAS: api
  #     PGRST_DB_ANON_ROLE: guest
  #     # Test Only
  #     PGRST_OPENAPI_MODE: ignore-privileges
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.postgrest.rule=Host(`${PROXY_HOST}`, `localhost`) && PathPrefix(`/postgrest`)"
  #     - "traefik.http.routers.postgrest.entrypoints=web"
  #     - "traefik.http.middlewares.postgrest-stripprefix.stripPrefix.prefixes=/postgrest"
  #     - "traefik.http.routers.postgrest.middlewares=postgrest-stripprefix@docker"
networks:
  traefik:
    external: true
